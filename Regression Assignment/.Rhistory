nNewspaper = (newspaper - min(newspaper))/(max(newspaper)-min(newspaper)),
rand = runif(dim(data)[1]),) %>%
arrange(rand)
head(data)
par(mfrow = c(1,3))
plot(nTV, nSales, main = "nSales vs nTV")
attach(data)
par(mfrow = c(1,3))
plot(nTV, nSales, main = "nSales vs nTV")
plot(nRadio, nSales, main = "nSales vs nRadio")
plot(nNewspaper, nSales, main = "nSales vs nNewspaper")
cor(data)
cor(select(data,nSales,nTV,nRadio,nNewspaper))
library(cars)
library(car)
install.packages("car")
library(car)
library(car)
library(tidyverse)
library(car)
detach("package:carData", unload = TRUE)
library(tidyverse)
library(car)
library(tidyverse)
library(car)
data <- read_csv("Advertising.csv")
attach(data)
str(data)
summary(data)
par(mfrow = c(2,2))
hist(TV,breaks = seq(0,300,30))
hist(radio)
hist(newspaper)
hist(Sales)
?hist
par(mfrow = c(1,3))
plot(TV, Sales, main = "Sales vs TV")
plot(radio, Sales, main = "Sales vs radio")
plot(newspaper, Sales, main = "Sales vs newspaper")
set.seed(100) # To produce reproducible result
data <- data %>%
select(Sales,TV,radio,newspaper) %>%
mutate(nSales = (Sales - min(Sales))/(max(Sales)-min(Sales)),
nTV = (TV - min(TV))/(max(TV)-min(TV)),
nRadio = (radio - min(radio))/(max(radio)-min(radio)),
nNewspaper = (newspaper - min(newspaper))/(max(newspaper)-min(newspaper)),
rand = runif(dim(data)[1]),) %>%
arrange(rand)
head(data)
attach(data)
par(mfrow = c(1,3))
plot(nTV, nSales, main = "nSales vs nTV")
plot(nRadio, nSales, main = "nSales vs nRadio")
plot(nNewspaper, nSales, main = "nSales vs nNewspaper")
cor(select(data,nSales,nTV,nRadio,nNewspaper))
dim(data)
train <- head(data,120)
test <- tail(data,80)
View(test)
rm(c(test,train))
rm(test)
rm(train)
# First we set training control to repeated K-fold cross validation
# with K = 10, and repeats = 3
train.control <- trainControl(method = "repeatedcv",
number = 10, repeats = 3)
library(caret)
# First we set training control to repeated K-fold cross validation
# with K = 10, and repeats = 3
train.control <- trainControl(method = "repeatedcv",
number = 10, repeats = 3)
# Then we train the linear model
model1 <- train(nSales ~ sqrt(nTV) + nRadio + nNewspaper, data = data, method = "lm",
trControl = train.control)
# Summary of the result
summary(model1)
summary(model1)
print(model1)
set.seed(100) # To produce reproducible result
data <- data %>%
select(Sales,TV,radio,newspaper) %>%
mutate(rand = runif(dim(data)[1]),) %>%
arrange(rand)
head(data)
cor(select(data,-rand))
# First we set training control to repeated K-fold cross validation
# with K = 10, and repeats = 3
train.control <- trainControl(method = "repeatedcv",
number = 10, repeats = 3)
# Then we train the linear model
model1 <- train(Sales ~ sqrt(TV) + radio + newspaper, data = data, method = "lm",
trControl = train.control)
# Summary of the result
summary(model1)
print(model1)
# First we set training control to repeated K-fold cross validation
# with K = 10, and repeats = 3
train.control <- trainControl(method = "repeatedcv",
number = 10, repeats = 3)
# Then we train the linear model
model1 <- train(Sales ~ sqrt(TV) + radio + newspaper, data = data, method = "lm",
trControl = train.control)
# Summary of the result
summary(model1)
print(model1)
VIF(model1)
vif(model1)
coef(model1)
names(model1)
vif(model1$finalModel)
# Then we train the linear model
model2 <- train(Sales ~ sqrt(TV) + radio, data = data, method = "lm",
trControl = train.control)
# Summary of the result
summary(model2)
print(model2)
vif(model2$finalModel)
plot(model2)
plot(model2$finalModel)
par(mfrow = c(2,2))
plot(model2$finalModel)
# First we set training control to repeated K-fold cross validation
# with K = 10, and repeats = 3
train.control <- trainControl(method = "repeatedcv",
number = 10, repeats = 3)
# Then we train the linear model
model1 <- train(Sales ~ I(sqrt(TV)) + radio + newspaper, data = data, method = "lm",
trControl = train.control)
# Summary of the result
summary(model1)
print(model1)
# Then we train the linear model
model2 <- train(Sales ~ I(sqrt(TV)) + radio, data = data, method = "lm",
trControl = train.control)
# Summary of the result
summary(model2)
print(model2)
anova(model1,model2)
anova(model1$finalModel, model2$finalModel)
library(scatterplot3d)
scatterplot3d(select(data,-rand))
scatterplot3d(x = sqrt(TV), y = radio, z = Sales)
s3d <- scatterplot3d(x = sqrt(TV), y = radio, z = Sales)
s3d <- scatterplot3d(x = sqrt(TV), y = radio, z = Sales)
# adding in the prediction plane
s3d$plane3d(model2$finalModel)
s3d <- scatterplot3d(x = sqrt(TV), y = radio, z = Sales, angle = 55)
# adding in the prediction plane
s3d$plane3d(model2$finalModel)
s3d <- scatterplot3d(x = sqrt(TV), y = radio, z = Sales, angle = 90)
# adding in the prediction plane
s3d$plane3d(model2$finalModel)
s3d <- scatterplot3d(x = sqrt(TV), y = radio, z = Sales, angle = 30)
# adding in the prediction plane
s3d$plane3d(model2$finalModel)
s3d <- scatterplot3d(x = sqrt(TV), y = radio, z = Sales, angle = 45)
# adding in the prediction plane
s3d$plane3d(model2$finalModel)
s3d <- scatterplot3d(x = sqrt(TV), y = radio, z = Sales, angle = 45)
# adding in the prediction plane
s3d$plane3d(model2$finalModel, fill = "red")
s3d <- scatterplot3d(x = sqrt(TV), y = radio, z = Sales, angle = 45)
# adding in the prediction plane
s3d$plane3d(model2$finalModel, col = "red")
?scatterplot3d$plane3d
?scatterplot3d
# adding in the prediction plane
s3d$plane3d(model2$finalModel, lty = "filled")
s3d <- scatterplot3d(x = sqrt(TV), y = radio, z = Sales, angle = 45)
# adding in the prediction plane
s3d$plane3d(model2$finalModel, lty = "filled")
s3d <- scatterplot3d(x = sqrt(TV), y = radio, z = Sales, angle = 45)
# adding in the prediction plane
s3d$plane3d(model2$finalModel, lty = "fill")
s3d <- scatterplot3d(x = sqrt(TV), y = radio, z = Sales, angle = 45)
# adding in the prediction plane
s3d$plane3d(model2$finalModel, lty.box = "solid")
?scatterplot3d
s3d <- scatterplot3d(x = sqrt(TV), y = radio, z = Sales, angle = 45)
# adding in the prediction plane
s3d$plane3d(model2$finalModel, lty = "solid")
?scatterplot3d
s3d <- scatterplot3d(x = sqrt(TV), y = radio, z = Sales, angle = 45)
# adding in the prediction plane
s3d$plane3d(model2$finalModel, lty.box = "solid")
?scatterplot3d
s3d <- scatterplot3d(x = sqrt(TV), y = radio, z = Sales, angle = 45)
# adding in the prediction plane
s3d$plane3d(model2$finalModel, lty = "solid", lty.box = "solid")
?scatterplot3d
s3d <- scatterplot3d(x = sqrt(TV), y = radio, z = Sales, angle = 30)
# adding in the prediction plane
s3d$plane3d(model2$finalModel, lty = "solid", lty.box = "solid")
?scatterplot3d
s3d <- scatterplot3d(x = sqrt(TV), y = radio, z = Sales, angle = 30)
# adding in the prediction plane
s3d$plane3d(model2$finalModel)
# Model with interaction term
model3 <- train(Sales ~ I(sqrt(TV)) * radio, data = data, method = "lm",
trControl = train.control)
# Summary of the result
summary(model3)
print(model3)
# Comparing with model1
anova(model3$finalModel, model1$finalModel)
# Comparing with model1
anova(model1$finalModel, model3$finalModel)
# Comparing with model1
summary(anova(model1$finalModel, model3$finalModel))
# Comparing with model1
anova(model1$finalModel, model3$finalModel)
# Comparing with model1
anova(model1$finalModel, model3$finalModel)
# Comparing with model2
anova(model2$finalModel, model3$finalModel)
# Comparing with model2
anova(model2$finalModel, model3$finalModel)
plot(model3$finalModel)
par(mfrow = c(2,2))
plot(model3$finalModel)
library(factoextra)
library(tidyverse)
library(car)
library(caret)
library(scatterplot3d)
library(factoextra)
data <- read_csv("Advertising.csv")
attach(data)
str(data)
summary(data)
par(mfrow = c(2,2))
hist(TV,breaks = seq(0,300,30))
hist(radio)
hist(newspaper)
hist(Sales)
?hist
par(mfrow = c(1,3))
plot(TV, Sales, main = "Sales vs TV")
plot(radio, Sales, main = "Sales vs radio")
plot(newspaper, Sales, main = "Sales vs newspaper")
set.seed(100) # To produce reproducible result
data <- data %>%
select(Sales,TV,radio,newspaper) %>%
mutate(rand = runif(dim(data)[1]),) %>%
arrange(rand)
head(data)
cor(select(data,-rand))
# First we set training control to repeated K-fold cross validation
# with K = 10, and repeats = 3
train.control <- trainControl(method = "repeatedcv",
number = 10, repeats = 3)
# Then we train the linear model
model1 <- train(Sales ~ I(sqrt(TV)) + radio + newspaper, data = data, method = "lm",
trControl = train.control)
# Summary of the result
summary(model1)
print(model1)
vif(model1$finalModel)
# Model without newspaper predictor
model2 <- train(Sales ~ I(sqrt(TV)) + radio, data = data, method = "lm",
trControl = train.control)
# Summary of the result
summary(model2)
print(model2)
anova(model1$finalModel, model2$finalModel)
vif(model2$finalModel)
par(mfrow = c(2,2))
plot(model2$finalModel)
s3d <- scatterplot3d(x = sqrt(TV), y = radio, z = Sales, angle = 30)
# adding in the prediction plane
s3d$plane3d(model2$finalModel)
# Model with interaction term
model3 <- train(Sales ~ I(sqrt(TV)) * radio, data = data, method = "lm",
trControl = train.control)
# Summary of the result
summary(model3)
print(model3)
# Comparing with model2
anova(model2$finalModel, model3$finalModel)
par(mfrow = c(2,2))
plot(model3$finalModel)
pca <- prcomp(select(data,TV,radio,newspaper), scale = TRUE)
pca <- prcomp(select(data,TV,radio,newspaper), scale = TRUE)
fviz_eig(pca)
pca <- prcomp(select(data,TV,radio,newspaper), scale = TRUE)
fviz_eig(pca)
get_eig(pca)
get_pca(pca)
# PCA
pca <- prcomp(select(data,TV,radio,newspaper), scale = TRUE)
# Scree plot
fviz_eig(pca)
# Obtaining the eigenvalues and var explained
get_eig(pca)
get_pca(pca$contrib)
get_pca(pca)
pca
# The rotation of
facto_summarize(pca)
# PCA
pca <- prcomp(select(data,TV,radio,newspaper), scale = TRUE)
# Scree plot
fviz_eig(pca)
# Obtaining the eigenvalues and var explained
get_eig(pca)
# The rotation of
facto_summarize(pca,var)
# PCA
pca <- prcomp(select(data,TV,radio,newspaper), scale = TRUE)
# Scree plot
fviz_eig(pca)
# Obtaining the eigenvalues and var explained
get_eig(pca)
# The rotation of
facto_summarize(pca,"var")
# The rotation of
pca.var <- get_pca_var(pca)
# PCA
pca <- prcomp(select(data,TV,radio,newspaper), scale = TRUE)
# Scree plot
fviz_eig(pca)
# Obtaining the eigenvalues and var explained
get_eig(pca)
# The rotation of
pca.var <- get_pca_var(pca)
pca.var$contrib
# PCA
pca <- prcomp(select(data,TV,radio,newspaper), scale = TRUE)
# Scree plot
fviz_eig(pca)
# Obtaining the eigenvalues and var explained
get_eig(pca)
# The rotation of
pca.var <- get_pca_var(pca)
pca.var$coord
pca.var$contrib
pca.var$cos2
# PCA
pca <- prcomp(select(data,TV,radio,newspaper), scale = TRUE)
# Scree plot
fviz_eig(pca)
# Obtaining the eigenvalues and var explained
get_eig(pca)
# The coefficient of features in each component
pca.var <- get_pca_var(pca)
pca.var$cos2
# PCA
pca <- prcomp(select(data,TV,radio,newspaper), scale = TRUE)
# Scree plot
fviz_eig(pca)
# Obtaining the eigenvalues and var explained
get_eig(pca)
# The coefficient of features in each component
pca.var <- get_pca_var(pca)
print(pca.var$cos2)
# PCA
pca <- prcomp(select(data,TV,radio,newspaper), scale = TRUE)
# Scree plot
fviz_eig(pca)
# Obtaining the eigenvalues and var explained
get_eig(pca)
# The coefficient of features in each component
pca.var <- get_pca_var(pca)
print(round(pca.var$cos2),5)
# PCA
pca <- prcomp(select(data,TV,radio,newspaper), scale = TRUE)
# Scree plot
fviz_eig(pca)
# Obtaining the eigenvalues and var explained
get_eig(pca)
# The coefficient of features in each component
pca.var <- get_pca_var(pca)
print(round(pca.var$cos2,5))
# PCA
pca <- prcomp(select(data,TV,radio,newspaper), scale = TRUE, center)
# PCA
pca <- prcomp(select(data,TV,radio,newspaper), scale = TRUE, center = TRUE)
# Scree plot
fviz_eig(pca)
# Obtaining the eigenvalues and var explained
get_eig(pca)
# The coefficient of features in each component
pca.var <- get_pca_var(pca)
print(round(pca.var$cos2,5))
# PCA
pca <- prcomp(select(data,TV,radio,newspaper), scale. = TRUE, center = TRUE)
# Scree plot
fviz_eig(pca)
# Obtaining the eigenvalues and var explained
get_eig(pca)
# The coefficient of features in each component
pca.var <- get_pca_var(pca)
print(round(pca.var$cos2,5))
# PCA
pca <- prcomp(select(data,TV,radio,newspaper), scale. = TRUE, center = TRUE)
summary(pca)
# Scree plot
fviz_eig(pca)
# Obtaining the eigenvalues and var explained
get_eig(pca)
# The coefficient of features in each component
pca.var <- get_pca_var(pca)
print(round(pca.var$cos2,5))
# PCA
pca <- princomp(select(data,TV,radio,newspaper), scale. = TRUE, center = TRUE)
summary(pca)
# Scree plot
fviz_eig(pca)
# Obtaining the eigenvalues and var explained
get_eig(pca)
# The coefficient of features in each component
pca.var <- get_pca_var(pca)
print(round(pca.var$cos2,5))
rm(pca)
rm(pca.var)
# PCA spectral decomposition method
pca.spectral <- princomp(select(data,TV,radio,newspaper),
scale. = TRUE, center = TRUE)
summary(pca.spectral)
# Scree plot
fviz_eig(pca.spectral)
# Obtaining the eigenvalues and var explained
get_eig(pca.spectral)
# The coefficient of features in each component
pca.spectral.var <- get_pca_var(pca.spectral)
print(round(pca.spectral.var$cos2,5))
# PCA spectral decomposition method
pca.spectral <- princomp(select(data,TV,radio,newspaper))
summary(pca.spectral)
# Scree plot
fviz_eig(pca.spectral)
# Obtaining the eigenvalues and var explained
get_eig(pca.spectral)
# The coefficient of features in each component
pca.spectral.var <- get_pca_var(pca.spectral)
print(round(pca.spectral.var$cos2,5))
# PCA spectral decomposition method
pca.spectral <- princomp(select(data,TV,radio,newspaper))
summary(pca.spectral)
# Scree plot
fviz_eig(pca.spectral)
# Obtaining the eigenvalues and var explained
get_eig(pca.spectral)
# The coefficient of features in each component
pca.spectral.var <- get_pca_var(pca.spectral)
print(round(pca.spectral.var$contrib,5))
# The coefficients of each features in each component
pca.spectral$loadings
# PCA spectral decomposition method
pca.spectral <- princomp(select(data,TV,radio,newspaper))
summary(pca.spectral)
# Scree plot
fviz_eig(pca.spectral)
# Obtaining the eigenvalues and var explained
get_eig(pca.spectral)
# The contributions of each features in each component
pca.spectral.var <- get_pca_var(pca.spectral)
print(round(pca.spectral.var$contrib,5))
# The coefficients of each features in each component
pca.spectral$loadings
pca.spectral
# The coefficients of each features in each component
pca.spectral$rotation
# PCA spectral decomposition method
pca.spectral <- princomp(select(data,TV,radio,newspaper))
summary(pca.spectral)
# Scree plot
fviz_eig(pca.spectral)
# Obtaining the eigenvalues and var explained
get_eig(pca.spectral)
# The contributions of each features in each component
pca.spectral.var <- get_pca_var(pca.spectral)
print(round(pca.spectral.var$contrib,5))
# The coefficients of each features in each component
pca.spectral$loadings
# The coefficients of each features in each component
names(pca.spectral$loadings)
# The coefficients of each features in each component
pca.spectral$loadings[1]
# The coefficients of each features in each component
pca.spectral$loadings[,1]
# The coefficients of each features in each component
pca.spectral$loadings
# Obtaining the eigenvalues and var explained
get_eig(pca.spectral)
# The coefficients of each features in each component
pca.spectral$loadings
# PCA SVD method
pca.svd <- prcomp(select(data,TV,radio,newspaper),
scale. = TRUE, center = TRUE)
summary(pca.svd)
# Scree plot
fviz_eig(pca.svd)
# Obtaining the eigenvalues and var explained
get_eig(pca.svd)
# The contribution of each features in each component
pca.svd.var <- get_pca_var(pca.svd)
print(round(pca.spectral.var$contrib,5))
# The coefficients of each features in each component
pca.svd$rotation
# PCA spectral decomposition method
pca.spectral <- princomp(select(data,TV,radio,newspaper))
summary(pca.spectral)
# Scree plot
fviz_eig(pca.spectral)
# Obtaining the eigenvalues and var explained
get_eig(pca.spectral)
# The contributions of each features in each component
pca.spectral.var <- get_pca_var(pca.spectral)
print(round(pca.spectral.var$contrib,5))
# The coefficients of each features in each component
pca.spectral$loadings
