method = "lm")
model4
summary(model4)
anova(model3$finalModel, model4$finalModel)
anova(model4$finalModel, model3$finalModel)
model4 <- train(MPG ~  Acceleration + invCylinders + Horsepower + Horsepower^2,
data = trainingSet,
na.action = na.omit,
method = "lm")
model4
summary(model4)
model4 <- trainingSet %>%
mutate(Horsepower2 = Horsepower^2) %>%
train(MPG ~  Acceleration + invCylinders + Horsepower + Horsepower2,
data = .,
na.action = na.omit,
method = "lm")
model4
summary(model4)
anova(model4$finalModel, model3$finalModel)
predictModel1 <- testSet %>%
select(Acceleration, invHorsepower, invCylinders) %>%
predict(model1$finalModel, .)
head(testSet)
predictModel1 <- testSet %>%
select(Acceleration, invHorsepower, invCylinders) %>%
predict(model1$finalModel, .)
predictModel1 <- testSet %>%
select(Acceleration, invCylinders, invHorsepower) %>%
predict(model1$finalModel, .)
predictModel1 <- testSet %>%
select(Acceleration, invCylinders, invHorsepower)# %>%
#predict(model1$finalModel, .)
head(testSet)
predictModel1 <- testSet %>%
select(Acceleration, invCylinders, invHorsepower) %>%
predict(model1, .)
predictModel1 <- testSet %>%
# select(Acceleration, invCylinders, invHorsepower) %>%
predict(model1, .)
head(testSet)
predictModel1 <- testSet %>%
predict(model1, .)
predictModel1
view(testSet)
predictModel1 <- testSet %>%
predict(model1, .)
predictModel1
view(testSet)
predictModel1 <- testSet %>%
predict(model1, .)
predictModel2 <- testSet %>%
mutate(Horsepower2 = Horsepower^2) %>%
predict(model1, .)
predictModel1 <- testSet %>%
predict(model1, .)
predictModel2 <- testSet %>%
mutate(Horsepower2 = Horsepower^2) %>%
predict(model2, .)
predictModel3 <- testSet %>%
predict(model3, .)
predictModel4 <- testSet %>%
mutate(Horsepower2 = Horsepower^2) %>%
predict(model4, .)
metricModel
rm(predictModel1)
rm(predictModel2)
metricModel3 <- metric(select(testData, MPG), predictModel3, length(model3$finalModel$coefficients)-1)
metricModel3 <- metric(select(testSet, MPG), predictModel3, length(model3$finalModel$coefficients)-1)
metricModel4 <- metric(select(testSet, MPG), predictModel4, length(model4$finalModel$coefficients)-1)
rbind(metricModel3, metricModel4)
predictModel3 <- testSet %>%
predict(model3, .)
predictModel4 <- testSet %>%
mutate(Horsepower2 = Horsepower^2) %>%
predict(model4, .)
metricModel3 <- metric(testSet$MPG, predictModel3, length(model3$finalModel$coefficients)-1)
metricModel4 <- metric(testSet$MPG, predictModel4, length(model4$finalModel$coefficients)-1)
rbind(metricModel3, metricModel4)
dim(testSet$MPG)
length(testSet$MPG)
length(na.omit(testSet$MPG))
predictModel3 <- testSet %>%
predict(model3, .)
predictModel4 <- testSet %>%
mutate(Horsepower2 = Horsepower^2) %>%
predict(model4, .)
metricModel3 <- metric(na.omit(testSet$MPG), predictModel3, length(model3$finalModel$coefficients)-1)
metricModel4 <- metric(na.omit(testSet$MPG), predictModel4, length(model4$finalModel$coefficients)-1)
rbind(metricModel3, metricModel4)
predictModel3 <- na.omit(testSet) %>%
predict(model3, .)
predictModel4 <- na.omit(testSet) %>%
mutate(Horsepower2 = Horsepower^2) %>%
predict(model4, .)
metricModel3 <- metric(na.omit(testSet$MPG), predictModel3, length(model3$finalModel$coefficients)-1)
metricModel4 <- metric(na.omit(testSet$MPG), predictModel4, length(model4$finalModel$coefficients)-1)
rbind(metricModel3, metricModel4)
length(predictModel3)
length(na.omit(testSet$MPG))
predictModel3 <- na.omit(testSet) %>%
predict(model3, .)
predictModel4 <- na.omit(testSet) %>%
mutate(Horsepower2 = Horsepower^2) %>%
predict(model4, .)
metricModel3 <- metric(na.omit(testSet)$MPG, predictModel3, length(model3$finalModel$coefficients)-1)
metricModel4 <- metric(na.omit(testSet)$MPG, predictModel4, length(model4$finalModel$coefficients)-1)
rbind(metricModel3, metricModel4)
length(predictModel3)
length(na.omit(testSet)$MPG)
predictModel3 <- na.omit(testSet) %>%
predict(model3, .)
predictModel4 <- na.omit(testSet) %>%
mutate(Horsepower2 = Horsepower^2) %>%
predict(model4, .)
metricModel3 <- metric(na.omit(testSet)$MPG, predictModel3, length(model3$finalModel$coefficients)-1)
metricModel4 <- metric(na.omit(testSet)$MPG, predictModel4, length(model4$finalModel$coefficients)-1)
rbind(metricModel3, metricModel4)
data <- read_csv("CarBig.csv")
data <- read_csv("CarBig.csv") %>%
select(-c(cyl4, Origin, when, Mfg, Model, Model_Year)) #remove unnecessary variable
colnames(data)
data <- read_csv("CarBig.csv") %>%
select(-c(cyl4, org, Origin, when, Mfg, Model, Model_Year)) #remove unnecessary variable
# PCA SVD method
pca.svd <- prcomp(select(data,-MPG),
scale. = TRUE, center = TRUE)
# PCA SVD method
pca.svd <- prcomp(na.omit(select(data,TV,radio,newspaper)),
scale. = TRUE, center = TRUE)
# PCA SVD method
pca.svd <- prcomp(na.omit(select(data,-MPG)),
scale. = TRUE, center = TRUE)
summary(pca.svd)
# Scree plot
fviz_eig(pca.svd)
# PCA SVD method
pca.svd <- prcomp(na.omit(select(data,-MPG)),
scale. = TRUE, center = TRUE)
summary(pca.svd)
# Scree plot
fviz_eig(pca.svd)
library(factoextra)
# Scree plot
fviz_eig(pca.svd)
# PCA SVD method
pca.svd <- prcomp(na.omit(select(data,-MPG)),
scale. = TRUE, center = TRUE)
summary(pca.svd)
# Scree plot
fviz_eig(pca.svd)
# Obtaining the eigenvalues and var explained
get_eig(pca.svd)
# The contribution of each features in each component
pca.svd.var <- get_pca_var(pca.svd)
print(round(pca.spectral.var$contrib,5))
library(tidyverse)
library(car)
library(caret)
library(scatterplot3d)
library(factoextra)
data <- read_csv("Advertising.csv")
attach(data)
str(data)
summary(data)
par(mfrow = c(2,2))
hist(TV,breaks = seq(0,300,30))
hist(radio)
hist(newspaper)
hist(Sales)
par(mfrow = c(1,3))
plot(TV, Sales, main = "Sales vs TV")
plot(radio, Sales, main = "Sales vs radio")
plot(newspaper, Sales, main = "Sales vs newspaper")
set.seed(100) # To produce reproducible result
data <- data %>%
select(Sales,TV,radio,newspaper) %>%
mutate(rand = runif(dim(data)[1]),) %>%
arrange(rand)
head(data)
cor(select(data,-rand))
# First we set training control to repeated K-fold cross validation
# with K = 10, and repeats = 3
train.control <- trainControl(method = "repeatedcv",
number = 10, repeats = 3)
# Then we train the linear model
model1 <- train(Sales ~ I(sqrt(TV)) + radio + newspaper, data = data, method = "lm",
trControl = train.control)
# Summary of the result
summary(model1)
print(model1)
vif(model1$finalModel)
# Model without newspaper predictor
model2 <- train(Sales ~ I(sqrt(TV)) + radio, data = data, method = "lm",
trControl = train.control)
# Summary of the result
summary(model2)
print(model2)
anova(model1$finalModel, model2$finalModel)
vif(model2$finalModel)
par(mfrow = c(2,2))
plot(model2$finalModel)
s3d <- scatterplot3d(x = sqrt(TV), y = radio, z = Sales, angle = 30)
# adding in the prediction plane
s3d$plane3d(model2$finalModel)
# Model with interaction term
model3 <- train(Sales ~ I(sqrt(TV)) * radio, data = data, method = "lm",
trControl = train.control)
# Summary of the result
summary(model3)
print(model3)
# Comparing with model2
anova(model2$finalModel, model3$finalModel)
par(mfrow = c(2,2))
plot(model3$finalModel)
# PCA spectral decomposition method
pca.spectral <- princomp(select(data,TV,radio,newspaper))
summary(pca.spectral)
# Scree plot
fviz_eig(pca.spectral)
# Obtaining the eigenvalues and var explained
get_eig(pca.spectral)
# The contributions of each features in each component
pca.spectral.var <- get_pca_var(pca.spectral)
print(round(pca.spectral.var$contrib,5))
# The coefficients of each features in each component
pca.spectral$loadings
# PCA SVD method
pca.svd <- prcomp(select(data,TV,radio,newspaper),
scale. = TRUE, center = TRUE)
summary(pca.svd)
# Scree plot
fviz_eig(pca.svd)
# Obtaining the eigenvalues and var explained
get_eig(pca.svd)
# The contribution of each features in each component
pca.svd.var <- get_pca_var(pca.svd)
print(round(pca.svd.var$contrib,5))
# The coefficients of each features in each component
pca.svd$rotation
# PCA SVD method
pca.svd <- prcomp(na.omit(select(data,-MPG)),
scale. = TRUE, center = TRUE)
library(tidyverse)
library(readxl)
library(caret)
library(PerformanceAnalytics)
library(car)
library(factoextra)
data <- read_csv("CarBig.csv")
dim(data)
summary(data)
head(data)
str(data)
data$cyl4 <- as.factor(data$cyl4)
data$Mfg <- as.factor(data$Mfg)
data$Origin <- as.factor(data$Origin)
data$org <- as.factor(data$org)
data$when <- as.factor(data$when)
data$Model_Year <- as.factor(data$Model_Year)
str(data)
data <- select(data, -c(cyl4, Origin, when))
str(data)
select(data, Acceleration, Displacement, Horsepower, MPG, Weight, Cylinders) %>%
chart.Correlation(histogram = TRUE, pch = 19)
ggplot(data)+
geom_point(aes(x = Acceleration, y = MPG, color = Weight, size = Horsepower))
ggplot(data)+
geom_point(aes(x = Horsepower, y = MPG, color = Cylinders))
ggplot(data)+
geom_point(aes(x = Horsepower, y = MPG, size = Weight, color = org))
select(data, Acceleration, Displacement, Horsepower, MPG, Weight, Cylinders) %>%
chart.Correlation(histogram = TRUE, pch = 19)
set.seed(100)
data <- data %>%
mutate(rand = runif(dim(data)[1])) %>%
arrange(rand)
head(data)
data <- data %>%
select(-c(Mfg, Model, Model_Year, org, rand)) %>% # unselect the stated features
mutate(invCylinders = 1/Cylinders,
invHorsepower = 1/Horsepower,
invDisplacement = 1/Displacement,
invWeight = 1/Weight)
dim(data)
trainingSet <- head(data, 325)
testSet <- tail(data, 81)
model1 <- train(MPG ~ Acceleration + invCylinders + invDisplacement +
invHorsepower + invWeight,
data = trainingSet,
na.action = na.omit,
method = "lm")
model1
summary(model1)
vif(model1$finalModel)
model2 <- train(MPG ~ Acceleration + invCylinders +
invHorsepower + invWeight,
data = trainingSet,
na.action = na.omit,
method = "lm")
model2
summary(model2)
anova(model1$finalModel, model2$finalModel)
vif(model2$finalModel)
model3 <- train(MPG ~ Acceleration + invCylinders + invHorsepower,
data = trainingSet,
na.action = na.omit,
method = "lm")
model3
summary(model3)
anova(model2$finalModel, model3$finalModel)
model4 <- trainingSet %>%
mutate(Horsepower2 = Horsepower^2) %>%
train(MPG ~  Acceleration + invCylinders + Horsepower + Horsepower2,
data = .,
na.action = na.omit,
method = "lm")
model4
summary(model4)
metric <- function(raw, predict, nPredictor, dp = 5){
n <- length(predict)
SSE <- sum((raw - predict) ^ 2)
SST <- sum((raw - (sum(raw)/n)) ^ 2)
R2 <- 1 - SSE/SST
R2adj <- 1 - (((1 - R2)*(n - 1))/(n - nPredictor - 1))
RMSE <- sqrt(SSE/n)
table <- data.frame(cbind(n, round(SSE,dp), round(SST,dp), round(R2,dp),
round(R2adj,dp), round(RMSE,dp)))
colnames(table) <- c("n","SSE","SST","R2","R2adj","RMSE")
return(table)
}
predictModel3 <- na.omit(testSet) %>%
predict(model3, .)
predictModel4 <- na.omit(testSet) %>%
mutate(Horsepower2 = Horsepower^2) %>%
predict(model4, .)
metricModel3 <- metric(na.omit(testSet)$MPG, predictModel3, length(model3$finalModel$coefficients)-1)
metricModel4 <- metric(na.omit(testSet)$MPG, predictModel4, length(model4$finalModel$coefficients)-1)
rbind(metricModel3, metricModel4)
data <- read_csv("CarBig.csv") %>%
select(-c(cyl4, org, Origin, when, Mfg, Model, Model_Year)) #remove unnecessary variable
# PCA SVD method
pca.svd <- prcomp(na.omit(select(data,-MPG)),
scale. = TRUE, center = TRUE)
summary(pca.svd)
# Scree plot
fviz_eig(pca.svd)
# Obtaining the eigenvalues and var explained
get_eig(pca.svd)
# The contribution of each features in each component
pca.svd.var <- get_pca_var(pca.svd)
print(round(pca.svd.var$contrib,5))
# The coefficients of each features in each component
pca.svd$rotation
library(pls)
install.packages("pls")
predict(pca.svd, testSet, nComp=2)
predict(pca.svd, testSet)
head(trainingSet)
head(testSet)
testSet <- select(testSet, Acceleration, Cylinders, Displacement, Horsepower, MPG, Weight)
trainingSet <- select(trainingSet, Acceleration, Cylinders, Displacement, Horsepower, MPG, Weight)
# PCA SVD method
pcr <- na.omit(trainingSet) %>%
pcr(MPG ~., data = ., scale = TRUE)
library(pls)
# PCA SVD method
pcr <- na.omit(trainingSet) %>%
pcr(MPG ~., data = ., scale = TRUE)
summary(pca.svd)
summary(pcr)
# Scree plot
fviz_eig(pcr)
summary(pcr)
validationplot(pcr, val.type = "MSEP")
summary(pcr)
head(data)
testSet <- na.omit(select(testSet, Acceleration, Cylinders, Displacement, Horsepower, MPG, Weight))
trainingSet <- na.omit(select(trainingSet, Acceleration, Cylinders, Displacement, Horsepower, MPG, Weight))
# PCA SVD method
pcr <- trainingSet %>%
pcr(MPG ~., data = ., scale = TRUE)
summary(pcr)
pcrPredict <- predict(pcr, testSet, ncomp = 2)
pcrPredict
pcrPredict <- predict(pcr, testSet, ncomp = 2)
metric(testSet$MPG, pcrPredcit, 1) # 2 components, so 1 degree of freedom
pcrPredict <- predict(pcr, testSet, ncomp = 2)
metric(testSet$MPG, pcrPredict, length(pcr$coefficients)-1)
pcrPredict <- predict(pcr, testSet, ncomp = 3)
metric(testSet$MPG, pcrPredict, length(pcr$coefficients)-1)
pcrPredict <- predict(pcr, testSet, ncomp = 5)
metric(testSet$MPG, pcrPredict, length(pcr$coefficients)-1)
pcrPredict <- predict(pcr, testSet, ncomp = 2)
metric(testSet$MPG, pcrPredict, length(pcr$coefficients)-1)
library(tidyverse)
library(readxl)
library(caret)
library(PerformanceAnalytics)
library(car)
library(factoextra)
library(pls)
data <- read_csv("CarBig.csv")
dim(data)
summary(data)
head(data)
str(data)
data$cyl4 <- as.factor(data$cyl4)
data$Mfg <- as.factor(data$Mfg)
data$Origin <- as.factor(data$Origin)
data$org <- as.factor(data$org)
data$when <- as.factor(data$when)
data$Model_Year <- as.factor(data$Model_Year)
str(data)
data <- select(data, -c(cyl4, Origin, when))
str(data)
select(data, Acceleration, Displacement, Horsepower, MPG, Weight, Cylinders) %>%
chart.Correlation(histogram = TRUE, pch = 19)
ggplot(data)+
geom_point(aes(x = Acceleration, y = MPG, color = Weight, size = Horsepower))
ggplot(data)+
geom_point(aes(x = Horsepower, y = MPG, color = Cylinders))
ggplot(data)+
geom_point(aes(x = Horsepower, y = MPG, size = Weight, color = org))
select(data, Acceleration, Displacement, Horsepower, MPG, Weight, Cylinders) %>%
chart.Correlation(histogram = TRUE, pch = 19)
set.seed(100)
data <- data %>%
mutate(rand = runif(dim(data)[1])) %>%
arrange(rand)
head(data)
data <- data %>%
select(-c(Mfg, Model, Model_Year, org, rand)) %>% # unselect the stated features
mutate(invCylinders = 1/Cylinders,
invHorsepower = 1/Horsepower,
invDisplacement = 1/Displacement,
invWeight = 1/Weight)
dim(data)
trainingSet <- head(data, 325)
testSet <- tail(data, 81)
model1 <- train(MPG ~ Acceleration + invCylinders + invDisplacement +
invHorsepower + invWeight,
data = trainingSet,
na.action = na.omit,
method = "lm")
model1
summary(model1)
vif(model1$finalModel)
model2 <- train(MPG ~ Acceleration + invCylinders +
invHorsepower + invWeight,
data = trainingSet,
na.action = na.omit,
method = "lm")
model2
summary(model2)
anova(model1$finalModel, model2$finalModel)
vif(model2$finalModel)
model3 <- train(MPG ~ Acceleration + invCylinders + invHorsepower,
data = trainingSet,
na.action = na.omit,
method = "lm")
model3
summary(model3)
anova(model2$finalModel, model3$finalModel)
model4 <- trainingSet %>%
mutate(Horsepower2 = Horsepower^2) %>%
train(MPG ~  Acceleration + invCylinders + Horsepower + Horsepower2,
data = .,
na.action = na.omit,
method = "lm")
model4
summary(model4)
metric <- function(raw, predict, nPredictor, dp = 5){
n <- length(predict)
SSE <- sum((raw - predict) ^ 2)
SST <- sum((raw - (sum(raw)/n)) ^ 2)
R2 <- 1 - SSE/SST
R2adj <- 1 - (((1 - R2)*(n - 1))/(n - nPredictor - 1))
RMSE <- sqrt(SSE/n)
table <- data.frame(cbind(n, round(SSE,dp), round(SST,dp), round(R2,dp),
round(R2adj,dp), round(RMSE,dp)))
colnames(table) <- c("n","SSE","SST","R2","R2adj","RMSE")
return(table)
}
predictModel3 <- na.omit(testSet) %>%
predict(model3, .)
predictModel4 <- na.omit(testSet) %>%
mutate(Horsepower2 = Horsepower^2) %>%
predict(model4, .)
metricModel3 <- metric(na.omit(testSet)$MPG, predictModel3, length(model3$finalModel$coefficients)-1)
metricModel4 <- metric(na.omit(testSet)$MPG, predictModel4, length(model4$finalModel$coefficients)-1)
rbind(metricModel3, metricModel4)
testSet <- na.omit(testSet)
trainingSet <- na.omit(trainingSet)
# PCA SVD method
pcr1 <- trainingSet %>%
select(Acceleration, Cylinders, Displacement, Horsepower, MPG, Weight)
pcr(MPG ~., data = ., scale = TRUE)
# PCA SVD method
pcr1 <- trainingSet %>%
select(Acceleration, Cylinders, Displacement, Horsepower, MPG, Weight) %>%
pcr(MPG ~., data = ., scale = TRUE)
summary(pcr1)
pcrPredict1 <- predict(pcr1, testSet, ncomp = 2)
metric(testSet$MPG, pcrPredict1, length(pcr1$coefficients)-1)
head(trainingSet)
pcr2 <- trainingSet %>%
select(Acceleration, invCylinders, invDisplacement, invHorsepower, MPG, invWeight) %>%
pcr(MPG ~., data = ., scale = TRUE)
summary(pcr2)
pcrPredict2 <- predict(pcr2, testSet, ncomp = 3)
metric(testSet$MPG, pcrPredict2, length(pcr2$coefficients)-1)
