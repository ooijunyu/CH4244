library(tidyverse)
library(readxl)
library(caret)
data <- read_excel("Fish Weight-3Only-Random.xlsx")
attach(data)
summary(data)
str(data)
head(data)
data <- data %>%
mutate("Bream-D" = ifelse(Species == "Bream",1,0),
"Roach-D" = ifelse(Species == "Roach",1,0),)
head(data)
tail(data)
BreamTraining <- filter(data, Species == "Bream") %>%
head(dim(.)[1]*0.8)
BreamTest <- filter(data, Species == "Bream") %>%
tail(dim(.)[1]*0.2)
tableBream <- c(RawSize = dim(filter(data,Species == "Bream"))[1],
TrainingSize = dim(BreamTraining)[1],
TestSize = dim(BreamTest)[1])
RoachTraining <- filter(data, Species == "Roach") %>%
head(dim(.)[1]*0.8)
RoachTest <- filter(data, Species == "Roach") %>%
tail(dim(.)[1]*0.2)
tableRoach <- c(RawSize = dim(filter(data,Species == "Roach"))[1],
TrainingSize = dim(RoachTraining)[1],
TestSize = dim(RoachTest)[1])
PerchTraining <- filter(data, Species == "Perch") %>%
head(dim(.)[1]*0.8)
PerchTest <- filter(data, Species == "Perch") %>%
tail(dim(.)[1]*0.2)
tablePerch <- c(RawSize = dim(filter(data,Species == "Perch"))[1],
TrainingSize = dim(PerchTraining)[1],
TestSize = dim(PerchTest)[1])
splitSize <- rbind(tableBream, tableRoach, tablePerch)
row.names(splitSize) <- c("Bream","Roach","Perch")
splitSize
TrainingSet <- rbind(BreamTraining, RoachTraining, PerchTraining)
TestSet <- rbind(BreamTest, RoachTest, PerchTest)
model1 <- train(Weight ~ Height + Width + `Bream-D` + `Roach-D`,
data = TrainingSet, method = "lm")
summary(model1)
print(model1)
ggplot(data) +
geom_point(aes(Height,Width, fill = Weight))
ggplot(data) +
geom_point(aes(Height,Width, color = Weight))
ggplot(data) +
geom_point(aes(Height,Width, color = Weight, shape = Species))
ggplot(data) +
geom_point(aes(Height,Width, color = Weight, shape = Species), size = 12)
ggplot(data) +
geom_point(aes(Height,Width, color = Weight, shape = Species), size = 6)
ggplot(data) +
geom_point(aes(Height,Width, color = Weight, shape = Species), size = 4)
cor(select(data, Species, Weight, Height, Width))
cor(select(data, -Species))
cor(select(data, -c(Species,Weight)))
cor(select(data, Height, Width))
cor(select(data,Weight, Height, Width))
select(data, Weight, Height, Width) %>%
mutate(HWR = Height/Width) %>%
select(data, Weight, HWR) %>%
cor()
select(data, Weight, Height, Width) %>%
mutate(HWR = Height/Width) %>%
cor(select(., Weight, HWR))
select(data, Weight, Height, Width) %>%
mutate(HWR = Height/Width) %>%
select(Weight, HWR) %>%
cor()
select(data, Weight, Height, Width) %>%
mutate(HWR = Height/(Width)^2) %>%
select(Weight, HWR) %>%
cor()
select(data, Weight, Height, Width) %>%
mutate(HWR = Height*Width %>%
select(Weight, HWR) %>%
cor()
select(data, Weight, Height, Width) %>%
mutate(HWR = Height*Width) %>%
select(Weight, HWR) %>%
cor()
select(data, Weight, Height, Width) %>%
mutate(HW = Height*Width) %>%
select(Weight, HW) %>%
cor()
model1 <- train(Weight ~ Height + Width + `Bream-D` + `Roach-D`,
data = TrainingSet, method = "lm")
summary(model1)
print(model1)
model2 <- train(Weight ~ Height * Width + `Bream-D` + `Roach-D`,
data = TrainingSet, method = "lm")
summary(model2)
print(model2)
model1$
model1 <- train(Weight ~ Height + Width + `Bream-D` + `Roach-D`,
data = TrainingSet, method = "lm")
summary(model1)
print(model1)
model2 <- train(Weight ~ Height * Width + `Bream-D` + `Roach-D`,
data = TrainingSet, method = "lm")
summary(model2)
print(model2)
model1$modelInfo
model1$metric
model1$results
model1 <- train(Weight ~ Height + Width + `Bream-D` + `Roach-D`,
data = TrainingSet, method = "lm")
summary(model1)
model2 <- train(Weight ~ Height * Width + `Bream-D` + `Roach-D`,
data = TrainingSet, method = "lm")
summary(model2)
rbind(model1$results, model2$results)
model1 <- train(Weight ~ Height + Width + `Bream-D` + `Roach-D`,
data = TrainingSet, method = "lm")
summary(model1)
model2 <- train(Weight ~ Height * Width + `Bream-D` + `Roach-D`,
data = TrainingSet, method = "lm")
summary(model2)
rbind(model1$results, model2$results) %>%
rownames(.) <- c("model1", "model2")
library(tidyverse)
library(readxl)
library(caret)
rbind(model1$results, model2$results) %>%
rownames(.) <- c("model1", "model2")
model1 <- train(Weight ~ Height + Width + `Bream-D` + `Roach-D`,
data = TrainingSet, method = "lm")
summary(model1)
model2 <- train(Weight ~ Height * Width + `Bream-D` + `Roach-D`,
data = TrainingSet, method = "lm")
summary(model2)
(rownames(rbind(model1$results, model2$results)) <- c("model1","model2"))
model1 <- train(Weight ~ Height + Width + `Bream-D` + `Roach-D`,
data = TrainingSet, method = "lm")
summary(model1)
model2 <- train(Weight ~ Height * Width + `Bream-D` + `Roach-D`,
data = TrainingSet, method = "lm")
summary(model2)
comparison <- rbind(model1$results, model2$results)
rownames(comparison) <- c("model1", "model2")
comparison
model1 <- train(Weight ~ Height + Width + `Bream-D` + `Roach-D`,
data = TrainingSet, method = "lm")
summary(model1)
model2 <- train(Weight ~ Height * Width + `Bream-D` + `Roach-D`,
data = TrainingSet, method = "lm")
summary(model2)
comparison <- rbind(model1$results, model2$results)
rownames(comparison) <- c("model1", "model2")
comparison
anova(model1$finalModel, model2$finalModel)
?predict
vignette("predict")
vignette("predict()")
vignette("caret::predict()")
predict1 <- predict(model1, select(TestSet,-Species))
summary(predict1)
predict1
dim(predict1)
length(predict1)
length(TestSet)
dim(TestSet)
names(predict1)
predict1 <- predict(model1, select(TestSet,-Species))
predict2 <- predict(model2, select(TestSet,-Species))
metric <- function(raw, predict){
SSE <- sum((raw - predict).^ 2)
metric <- function(raw, predict){
SSE <- sum((raw - predict)%^% 2)
}
metric <- function(raw, predict, nPredictor){
n <- length(raw)
SSE <- sum((raw - predict) %^% 2)
SST <- sum((raw - mean(raw)) %^% 2)
R2 <- 1 - SSE/SST
R2adj <- 1 - (((1 - R2)*(n - 1))/(n - nPredictor - 1))
RMSE <- sqrt(SSE/n)
return(c(n, SSE, SST, R2, R2adj, RMSE))
}
model1
model1$finalModel
coeff(model1$finalModel)
dim(model1$finalModel)
length(model1$finalModel)
model1$finalModel$param
model1$finalModel$coefficients
length(model1$finalModel$coefficients)
metric1 <- metric(select(TestSet,Weight), predict1, length(model1$finalModel$coefficients)-1)
metric <- function(raw, predict, nPredictor){
n <- length(raw)
SSE <- sum((raw - predict) ^ 2)
SST <- sum((raw - mean(raw)) ^ 2)
R2 <- 1 - SSE/SST
R2adj <- 1 - (((1 - R2)*(n - 1))/(n - nPredictor - 1))
RMSE <- sqrt(SSE/n)
return(c(n, SSE, SST, R2, R2adj, RMSE))
}
metric1 <- metric(select(TestSet,Weight), predict1, length(model1$finalModel$coefficients)-1)
metric2 <- metric(select(TestSet,Weight), predict2, length(model2$finalModel$coefficients)-1)
metric1
predict1
select(TestSet, -Species)
predict1
length(select(TestSet,Weight))
metric <- function(raw, predict, nPredictor){
n <- length(predict)
SSE <- sum((raw - predict) ^ 2)
SST <- sum((raw - mean(raw)) ^ 2)
R2 <- 1 - SSE/SST
R2adj <- 1 - (((1 - R2)*(n - 1))/(n - nPredictor - 1))
RMSE <- sqrt(SSE/n)
return(c(n, SSE, SST, R2, R2adj, RMSE))
}
metric1 <- metric(select(TestSet,Weight), predict1, length(model1$finalModel$coefficients)-1)
metric2 <- metric(select(TestSet,Weight), predict2, length(model2$finalModel$coefficients)-1)
metric1
select(TestSet,Weight)
mean(select(TestSet,Weight))
mean(as_numeric(select(TestSet,Weight)))
mean(as.numeric(select(TestSet,Weight)))
metric <- function(raw, predict, nPredictor){
n <- length(predict)
SSE <- sum((raw - predict) ^ 2)
SST <- sum((raw - (sum(raw)/n)) ^ 2)
R2 <- 1 - SSE/SST
R2adj <- 1 - (((1 - R2)*(n - 1))/(n - nPredictor - 1))
RMSE <- sqrt(SSE/n)
return(c(n, SSE, SST, R2, R2adj, RMSE))
}
metric1 <- metric(select(TestSet,Weight), predict1, length(model1$finalModel$coefficients)-1)
metric2 <- metric(select(TestSet,Weight), predict2, length(model2$finalModel$coefficients)-1)
metric1
metric1 <- metric(select(TestSet,Weight), predict1, length(model1$finalModel$coefficients)-1)
metric2 <- metric(select(TestSet,Weight), predict2, length(model2$finalModel$coefficients)-1)
metric <- function(raw, predict, nPredictor, dp = 5){
n <- length(predict)
SSE <- sum((raw - predict) ^ 2)
SST <- sum((raw - (sum(raw)/n)) ^ 2)
R2 <- 1 - SSE/SST
R2adj <- 1 - (((1 - R2)*(n - 1))/(n - nPredictor - 1))
RMSE <- sqrt(SSE/n)
return(c(n, round(SSE,dp), round(SST,dp), round(R2,dp), round(R2adj,dp), round(RMSE,dp)))
}
metric1 <- metric(select(TestSet,Weight), predict1, length(model1$finalModel$coefficients)-1)
metric2 <- metric(select(TestSet,Weight), predict2, length(model2$finalModel$coefficients)-1)
metric1
print(metric1)
print(metric1,5)
metric <- function(raw, predict, nPredictor, dp = 5){
n <- length(predict)
SSE <- sum((raw - predict) ^ 2)
SST <- sum((raw - (sum(raw)/n)) ^ 2)
R2 <- 1 - SSE/SST
R2adj <- 1 - (((1 - R2)*(n - 1))/(n - nPredictor - 1))
RMSE <- sqrt(SSE/n)
table <- c(n, round(SSE,dp), round(SST,dp), round(R2,dp),
round(R2adj,dp), round(RMSE,dp))
colnames(table) <- c("n","SSE","SST","R2","R2adj","RMSE")
return(table)
}
metric1 <- metric(select(TestSet,Weight), predict1, length(model1$finalModel$coefficients)-1)
metric <- function(raw, predict, nPredictor, dp = 5){
n <- length(predict)
SSE <- sum((raw - predict) ^ 2)
SST <- sum((raw - (sum(raw)/n)) ^ 2)
R2 <- 1 - SSE/SST
R2adj <- 1 - (((1 - R2)*(n - 1))/(n - nPredictor - 1))
RMSE <- sqrt(SSE/n)
table <- table(c(n, round(SSE,dp), round(SST,dp), round(R2,dp),
round(R2adj,dp), round(RMSE,dp)))
colnames(table) <- c("n","SSE","SST","R2","R2adj","RMSE")
return(table)
}
metric1 <- metric(select(TestSet,Weight), predict1, length(model1$finalModel$coefficients)-1)
metric <- function(raw, predict, nPredictor, dp = 5){
n <- length(predict)
SSE <- sum((raw - predict) ^ 2)
SST <- sum((raw - (sum(raw)/n)) ^ 2)
R2 <- 1 - SSE/SST
R2adj <- 1 - (((1 - R2)*(n - 1))/(n - nPredictor - 1))
RMSE <- sqrt(SSE/n)
table <- data.frame(c(n, round(SSE,dp), round(SST,dp), round(R2,dp),
round(R2adj,dp), round(RMSE,dp)))
colnames(table) <- c("n","SSE","SST","R2","R2adj","RMSE")
return(table)
}
metric1 <- metric(select(TestSet,Weight), predict1, length(model1$finalModel$coefficients)-1)
metric <- function(raw, predict, nPredictor, dp = 5){
n <- length(predict)
SSE <- sum((raw - predict) ^ 2)
SST <- sum((raw - (sum(raw)/n)) ^ 2)
R2 <- 1 - SSE/SST
R2adj <- 1 - (((1 - R2)*(n - 1))/(n - nPredictor - 1))
RMSE <- sqrt(SSE/n)
table <- data.frame(cbind(n, round(SSE,dp), round(SST,dp), round(R2,dp),
round(R2adj,dp), round(RMSE,dp)))
colnames(table) <- c("n","SSE","SST","R2","R2adj","RMSE")
return(table)
}
metric1 <- metric(select(TestSet,Weight), predict1, length(model1$finalModel$coefficients)-1)
metric2 <- metric(select(TestSet,Weight), predict2, length(model2$finalModel$coefficients)-1)
options(scipen = 999)
testMetric <- rbind(metric1, metric2)
rownames(testMetric) <- c("model1","model2")
metric1 <- metric(select(TestSet,Weight), predict1, length(model1$finalModel$coefficients)-1)
metric2 <- metric(select(TestSet,Weight), predict2, length(model2$finalModel$coefficients)-1)
options(scipen = 999)
testMetric <- rbind(metric1, metric2)
rownames(testMetric) <- c("model1","model2")
testMetric
rownames(comparison) <- c("training1", "training2")
metric1 <- metric(select(TestSet,Weight), predict1, length(model1$finalModel$coefficients)-1)
metric2 <- metric(select(TestSet,Weight), predict2, length(model2$finalModel$coefficients)-1)
options(scipen = 999)
testMetric <- rbind(metric1, metric2)
rownames(testMetric) <- c("test1","test2")
testMetric
comparison
testMetric1 <- metric(select(TestSet,Weight), predict1, length(model1$finalModel$coefficients)-1)
testMetric2 <- metric(select(TestSet,Weight), predict2, length(model2$finalModel$coefficients)-1)
options(scipen = 999)
testMetric <- rbind(metric1, metric2)
rownames(testMetric) <- c("test1","test2")
allMetric <- rbind()
testMetric
testMetric1 <- metric(select(TestSet,Weight), predict1, length(model1$finalModel$coefficients)-1)
testMetric2 <- metric(select(TestSet,Weight), predict2, length(model2$finalModel$coefficients)-1)
trainMetric1 <- predict(model1, select(TrainingSet, -Species)) %>%
metric(select(TrainingSet,Weight), predict1, length(model1$finalModel$coefficients)-1)
trainMetric2 <- predict(model2, select(TrainingSet, -Species)) %>%
metric(select(TrainingSet,Weight), predict2, length(model2$finalModel$coefficients)-1)
options(scipen = 999) # to turn of the scientific notation
allMetric <- rbind(trainMetric1, traiMetric2, testMetric1, testMetric2)
testMetric1 <- metric(select(TestSet,Weight), predict1, length(model1$finalModel$coefficients)-1)
testMetric2 <- metric(select(TestSet,Weight), predict2, length(model2$finalModel$coefficients)-1)
trainMetric1 <- predict(model1, select(TrainingSet, -Species)) %>%
metric(select(TrainingSet,Weight), predict1, length(model1$finalModel$coefficients)-1)
trainMetric2 <- predict(model2, select(TrainingSet, -Species)) %>%
metric(select(TrainingSet,Weight), predict2, length(model2$finalModel$coefficients)-1)
options(scipen = 999) # to turn of the scientific notation
allMetric <- rbind(trainMetric1, trainMetric2, testMetric1, testMetric2)
rownames(allMetric) <- c("train1","train2","test1","test2")
allMetric
trainMetric1
testMetric1 <- metric(select(TestSet,Weight), predict1, length(model1$finalModel$coefficients)-1)
testMetric2 <- metric(select(TestSet,Weight), predict2, length(model2$finalModel$coefficients)-1)
trainMetric1 <- predict(model1, select(TrainingSet, -Species)) %>%
metric(select(TrainingSet,Weight), ., length(model1$finalModel$coefficients)-1)
trainMetric2 <- predict(model2, select(TrainingSet, -Species)) %>%
metric(select(TrainingSet,Weight), ., length(model2$finalModel$coefficients)-1)
options(scipen = 999) # to turn of the scientific notation
allMetric <- rbind(trainMetric1, trainMetric2, testMetric1, testMetric2)
allMetric
trainMetric1
# rownames(allMetric) <- c("train1","train2","test1","test2")
testMetric1 <- metric(select(TestSet,Weight), predict1, length(model1$finalModel$coefficients)-1)
testMetric2 <- metric(select(TestSet,Weight), predict2, length(model2$finalModel$coefficients)-1)
trainMetric1 <- predict(model1, select(TrainingSet, -Species)) %>%
metric(select(TrainingSet,Weight), ., length(model1$finalModel$coefficients)-1)
trainMetric2 <- predict(model2, select(TrainingSet, -Species)) %>%
metric(select(TrainingSet,Weight), ., length(model2$finalModel$coefficients)-1)
options(scipen = 999) # to turn of the scientific notation
allMetric <- rbind(trainMetric1, trainMetric2, testMetric1, testMetric2)
rownames(allMetric) <- c("train1","train2","test1","test2")
allMetric
library(tidyverse)
library(readxl)
library(caret)
data <- read_excel("Fish Weight-3Only-Random.xlsx")
attach(data)
summary(data)
str(data)
head(data)
data <- data %>%
mutate("Bream-D" = ifelse(Species == "Bream",1,0),
"Roach-D" = ifelse(Species == "Roach",1,0),)
head(data)
tail(data)
ggplot(data) +
geom_point(aes(Height,Width, color = Weight, shape = Species), size = 4)
cor(select(data,Weight, Height, Width))
select(data, Weight, Height, Width) %>%
mutate(HW = Height*Width) %>%
select(Weight, HW) %>%
cor()
BreamTraining <- filter(data, Species == "Bream") %>%
head(dim(.)[1]*0.8)
BreamTest <- filter(data, Species == "Bream") %>%
tail(dim(.)[1]*0.2)
tableBream <- c(RawSize = dim(filter(data,Species == "Bream"))[1],
TrainingSize = dim(BreamTraining)[1],
TestSize = dim(BreamTest)[1])
RoachTraining <- filter(data, Species == "Roach") %>%
head(dim(.)[1]*0.8)
RoachTest <- filter(data, Species == "Roach") %>%
tail(dim(.)[1]*0.2)
tableRoach <- c(RawSize = dim(filter(data,Species == "Roach"))[1],
TrainingSize = dim(RoachTraining)[1],
TestSize = dim(RoachTest)[1])
PerchTraining <- filter(data, Species == "Perch") %>%
head(dim(.)[1]*0.8)
PerchTest <- filter(data, Species == "Perch") %>%
tail(dim(.)[1]*0.2)
tablePerch <- c(RawSize = dim(filter(data,Species == "Perch"))[1],
TrainingSize = dim(PerchTraining)[1],
TestSize = dim(PerchTest)[1])
splitSize <- rbind(tableBream, tableRoach, tablePerch)
row.names(splitSize) <- c("Bream","Roach","Perch")
splitSize
TrainingSet <- rbind(BreamTraining, RoachTraining, PerchTraining)
TestSet <- rbind(BreamTest, RoachTest, PerchTest)
model1 <- train(Weight ~ Height + Width + `Bream-D` + `Roach-D`,
data = TrainingSet, method = "lm")
summary(model1)
model2 <- train(Weight ~ Height * Width + `Bream-D` + `Roach-D`,
data = TrainingSet, method = "lm")
summary(model2)
comparison <- rbind(model1$results, model2$results)
rownames(comparison) <- c("training1", "training2")
comparison
anova(model1$finalModel, model2$finalModel)
predict1 <- predict(model1, select(TestSet,-Species))
predict2 <- predict(model2, select(TestSet,-Species))
predict1
metric <- function(raw, predict, nPredictor, dp = 5){
n <- length(predict)
SSE <- sum((raw - predict) ^ 2)
SST <- sum((raw - (sum(raw)/n)) ^ 2)
R2 <- 1 - SSE/SST
R2adj <- 1 - (((1 - R2)*(n - 1))/(n - nPredictor - 1))
RMSE <- sqrt(SSE/n)
table <- data.frame(cbind(n, round(SSE,dp), round(SST,dp), round(R2,dp),
round(R2adj,dp), round(RMSE,dp)))
colnames(table) <- c("n","SSE","SST","R2","R2adj","RMSE")
return(table)
}
testMetric1 <- metric(select(TestSet,Weight), predict1, length(model1$finalModel$coefficients)-1)
testMetric2 <- metric(select(TestSet,Weight), predict2, length(model2$finalModel$coefficients)-1)
trainMetric1 <- predict(model1, select(TrainingSet, -Species)) %>%
metric(select(TrainingSet,Weight), ., length(model1$finalModel$coefficients)-1)
trainMetric2 <- predict(model2, select(TrainingSet, -Species)) %>%
metric(select(TrainingSet,Weight), ., length(model2$finalModel$coefficients)-1)
options(scipen = 999) # to turn of the scientific notation
allMetric <- rbind(trainMetric1, trainMetric2, testMetric1, testMetric2)
rownames(allMetric) <- c("train1","train2","test1","test2")
allMetric
